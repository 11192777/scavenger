import logging
import re

import utils.FileUtils
from utils import FileUtils

ignoreList = ['20210728155134', '20211215160269', '2021062112060001', '20220120215803', '20211019181103', '20211116200105', '2021427140623', '20220222152402', '2020012014270009', '20220804180201', '20220413160001', '20211210114101', '20210804210101', '20220222105928', '2020120210030911', '2020012015020003', '20220118113701', '20220521124804', '20210330214809', '202107161722', '20220518113901', '2021012015231002', '20210728185033', '20220211110333', '20211031154896', '2020120210030705', '20210804213101', '20210917152644', '20220408150801', '20210611214901', '20210114175402', '20210728155036', '202107141700', '20220318120688', '20211221173500', '20211208152104', '20210816141801', '20220303182102', '20211130193958', '20220302203301', '20220107110401', '20220125151103', '20220808180201', '20211201143301', '20220123174601', '20211220114956', '2021022812200002', '20210513153101',
              '20210927163830', '20210330161018', '2021022614170002', '20220119172690', '20220407123501', '20220824113000', '20220325174254', '20220401110224', '2020120210030846', '20220402145600', '20210329111135', '20210512184436', '2021070912010002', '20210826142502', '20220120144511', '20211104095534', '20210514095421', '20211130193959', '20210622001', '20210512183636', '20211220114957', '20211221113102', '20220428163211', '2020120210031210', '20211019191102', '20211118140901', '20220302104467', '20211126094102', '20220413113722', '2021071311130003', '20220318093534', '20210126115401', '2021062215320004', '20211202154736', '20220527150101', '20210806202103', '20211227115811', '20210813193402', '20211213143699', '20210726210401', '20210524162733', '20220119192586', '20210922152648', '20220802120902', '2020120417560103', '20210926180601', '20220218102701', '20210728155025',
              '20220408102688', '20220330141901', '20220330180856', '2021070715340001', '2021012015234003', '20211214122135', '20211124103802', '20210728175123', '20210909225029', '20210629001', '20210329152701', '20220211112623', '20220218102702', '20220330152201', '20211130162601', '20210825113602', '20210701001', '20220228121478', '20220124151001', '20211228194601', '20210519105304', '20210915172001', '20211215110802', '20210825092301', '20211110211201', '20220129175144', '20211116200100', '20210331163030', '2021022615340002', '20210914105839', '20210425112121', '2021012015235007', '20210514165501', '2021022615310002', '20220215204710', '20211206120401', '20210517171812', '2022041918484900', '20211116200103', '20211124104701', '20220309175601', '20220415180901', '20210330110639', '20211206115601', '20210617001', '20210425112020', '20220309175801', '20211103161801', '20210803103700',
              '20210330110043', '2021061010120004', '20220415175501', '20210305102336', '20211031153896', '2021022614320002', '20220301112233', '2021022615420002', '20220324173201', '20211231100967', '20210615005', '20220414124401', '2021012015233003', '2021060916090001', '20220826113000', '20211122201901', '20210929171702', '202103301170422', '20210804183407', '20220224260966', '20211208201301', '20220222105990', '20220427041001', '20210728155046', '20211129200401', '2021012015235016', '20220302103176', '20220330182818', '20220224203910', '20220119205166', '2020012015010002', '20210817110601', '20210917164545', '2020120210030830', '20220809191501', '20211214151661', '20210910114203', '2020120210030816', '20220401110222', '20211130162602', '20210407103754', '202107131002', '2021062215350004', '20210330162423', '20220712144104', '2021061016430006', '20220214172989', '2020120210030826',
              '20211130193957', '20220519173702', '20220119172689', '20210825095811', '20210825100012', '20210510111642', '2021022615370002', '20210602105302', '20210819144214', '202105111700', '202107011002', '20220401110223', '20220310150768', '20211104112301', '20220125151102', '20210331142921', '20210926164501', '20211216112845', '20220311161166', '20210329111117', '20220302105123', '20210817182732', '20211222224402', '20211102152211', '20210330110503', '20210926180603', '2020120210030510', '20220401101178', '20220125170166', '20220705201701', '20210805201646', '202107211004', '202203171154003', '2021030814380001', '20210929101601', '20211119153702', '20211215105801', '20210331144211', '20210914155025', '20210818091601', '20210827173219', '20210330161231', '20220123121980', '20220311161167', '20210402102311', '20220118155012', '20220420101256', '20220510170148', '2020120119222413',
              '2021022614290002', '20210926174401', '202103291116401', '20220113144511', '20210517104120', '20210902104825', '202107261620', '2021060811360003', '2021071310430004', '2020012514553204', '2021012015232003', '20211130195001', '20211126094101', '2021060817570001', '20210705501', '20220120160201', '20220630101156', '20220125151101', '20211217120301', '20220124143289', '20211116200104', '20210928120501', '20220329104194', '20220309175701', '20220330170366', '20210926210624', '2021061016320004', '20211213143677', '20210519105303', '2021022614300003', '20211215170502', '20210929111301', '20210804113407', '20210519105305', '20210330161142', '20210913145001', '20211207110000', '20220407102501', '20220421165501', '20210804165301', '2021423150355', '20220214172988', '20210831144401', '20110121160299', '20211020174901', '20220524204901', '20220621121301', '2021022615360002',
              '20210805215303', '20220426134801', '202111051835', '20220418184601', '20211221192301', '20211031153890', '20210331181233', '20210804165401', '20220120212001', '20200712150403', '2021022609270002', '20211019181104', '2021071316180001', '20210407144044', '2020120210030836', '20211216094503', '20211124103401', '20211019191101', '2021022614150002', '20210929103301', '20220123121990', '20210909192744', '20220104112401', '20210126115301', '2021062112110001', '20210329111114', '20211020174302', '20220823110489', '20211019181105', '20211116200102', '20220425205101', '20220309163001', '2021062215230002', '20210329161232', '2021071311070002', '20220124121501', '20220224260988', '20211117101101', '20220212153401', '20220215145468', '20211124104702', '20210511214102', '20210621001', '20210330110844', '20211202194601', '20220823115878', '2021427140645', '2021425105616',
              '20210401162501', '20220125191601', '20210817160001', '20220414153901', '20211130193956', '20210823212003', '20220311183001', '20210329111146', '20210615014', '202103301709', '20210915111445', '20210913144901', '20220421152103', '20211031153899', '20210527161301', '20210827094201', '20210329101620', '20220123155367', '20220107161126', '20210524114101', '202107010902', '20211126101901', '20211027101401', '20220124120802', '20210813114302', '20210929120401', '20210602105301', '20220329104195', '20220124143288', '20211122202001', '20210916111001', '20220302203303', '20211009163209', '2021022615460002', '2021060815480002', '20210831154902', '20210916180401', '20220120160202', '20211209164401', '20220129175166', '2021423151109', '20210917194833', '2021062215210002', '2021022614160002', '20211116200101', '20210914113678', '20210330111114', "create_tables", "alter_table",
              "drop_migrate_data", "drop_migrate_data2", "drop_migrate_data3", "drop_tenant_migrate_data"]


def listChangeLogsByFilePath(path, ignoreFiles=None):
    fileFullPaths = [(path + "/" + fileName) for fileName in FileUtils.lsFiles(path) if fileName.endswith(".xml")]
    result = []
    for filePath in fileFullPaths:
        with open(filePath, 'r', encoding='utf-8') as file:
            for line in file.readlines():
                changeSetIds = re.findall(r'id="(.+?)"', line)
                for changeSetId in changeSetIds:
                    result.append(str(changeSetId).replace("oracle", ""))
    return result


class SqlAdapterServer:
    apiSelector = [
        "生成ChangeSet差异",
        "SQL Adapter",
        "ChangeSet: create table",
        "ChangeSet: create index"
    ]

    def __init__(self, type, content):
        self.type = type
        self.content = content

    def execute(self):
        if self.type == self.apiSelector[0]:
            return self.showDiff()
        elif self.type == self.apiSelector[1]:
            return self.convertSql()
        elif self.type == self.apiSelector[2]:
            return self.changeSetCreateTable()
        elif self.type == self.apiSelector[3]:
            return self.changeSetCreateIndex()

    def changeSetCreateTable(self):
        data = self.content
        data = data.replace("bigint(20)", "bigint")
        data = data.replace("bigint", "number(20)")
        data = data.replace('type="int"', 'type="number(11)"')
        data = data.replace("varchar", "nvarchar2")
        data = data.replace("timestamp", "date")
        data = data.replace('type="text"', 'type="varchar2(4000)"')
        data = data.replace('autoIncrement="${autoIncrement}" ', "")
        temp = ""
        for line in data.split("\n"):
            if "<createTable tableName" in line and "remarks=" in line:
                line = line.split("remarks=")[0] + ">"
            temp = temp + line + "\n"
        data = temp
        data = self.changeSetCreateIndex(data)
        return data

    def showDiff(self):
        resource = "{}".format(self.content)
        mysqlPath1 = "{}/db/changelog".format(resource)
        mysqlPath2 = "{}/db/sub-table".format(resource)
        oraclePath1 = "{}/db/changelog/oracle".format(resource)
        oraclePath2 = "{}/db/changelog/oracle/oldFile".format(resource)

        mysqlChangeSets = listChangeLogsByFilePath(mysqlPath1) + listChangeLogsByFilePath(mysqlPath2)
        oracleChangeSets = listChangeLogsByFilePath(oraclePath1) + listChangeLogsByFilePath(oraclePath2) + ignoreList

        strs = []
        diffs = set(mysqlChangeSets).difference(set(oracleChangeSets))
        for changeSetId in mysqlChangeSets:
            if changeSetId in diffs:
                strs.append("===> 待适配: {}".format(changeSetId))
        return str.join("\n", strs)

    def convertSql(self):
        sql = str(self.content)
        sql = sql.replace("(", " (")
        sql = re.sub(r"\s+", " ", sql).upper()
        sql = sql.replace("`", "")
        sql = sql.replace("now()", "sysdate")
        sql = sql.replace("=''", "IS NULL")
        if "INSERT INTO" in sql:
            print(sql)
            if "(ID" not in sql:
                print(sql)
                sql = re.sub(r'INSERT INTO .+? \(', re.findall(r'INSERT INTO .+? \(', sql)[0] + "ID, ", sql)
                sql = re.sub(r'VALUES \(', re.findall(r'VALUES \(', sql)[0] + "seq_on_common_tabs.nextval, ", sql)
        sql = sql.replace("TRUE", "1")
        sql = sql.replace("FALSE", "0")
        temp = ""
        i = 0
        while i < len(sql):
            dateSql = sql[i:i + 21]
            date = re.findall(r"'\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d'", dateSql, re.M)
            if date:
                temp = temp + "TO_DATE({}, 'yyyy-mm-dd hh24:mi:ss')".format(date[0])
                i = i + 21
            else:
                temp = temp + sql[i]
                i = i + 1
        sql = temp
        sql = sql.replace(";", ";\n")
        if sql.endswith("\n"):
            sql = sql[0:-1]
        sql = sql.replace("VALUES", "\nVALUES")
        if "TRUNCATE" in sql:
            sql = sql.replace("TRUNCATE", "TRUNCATE TABLE")
        return sql

    def changeSetCreateIndex(self, content=None):
        changeSet = content or self.content
        if "createIndex" not in changeSet:
            return changeSet
        tableName = re.findall(r'tableName="(.+?)"', changeSet)[0]
        indexName = re.findall(r'indexName="(.+?)"', changeSet)[0]
        changeSet = re.sub(r'indexName=".+?"', 'indexName="{}_{}"'.format(tableName, indexName), changeSet)
        return changeSet


